package com.sme.elasticsearch.testcontainer;

import java.io.File;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import org.elasticsearch.common.io.FileSystemUtils;
import org.elasticsearch.node.Node;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import pl.allegro.tech.embeddedelasticsearch.EmbeddedElastic;
import pl.allegro.tech.embeddedelasticsearch.IndexSettings;
import pl.allegro.tech.embeddedelasticsearch.PopularProperties;

/**
 *
 */
public class EmbeddedContainerTest
{
    protected static Node NODE;
    protected static EmbeddedElastic EMBEDDED_ELASTIC;

    @BeforeClass
    public static void beforeAll() throws IOException, InterruptedException
    {
        EMBEDDED_ELASTIC = EmbeddedElastic.builder()
                .withElasticVersion("6.8.4")
                .withSetting(PopularProperties.TRANSPORT_TCP_PORT, 9350)
                .withSetting(PopularProperties.CLUSTER_NAME, "my_cluster")
                .withPlugin("analysis-stempel")
                .withStartTimeout(120, TimeUnit.SECONDS)
                .withIndex("cars", IndexSettings.builder()
                        .withType("car", ClassLoader.getSystemResourceAsStream("car-mapping.json"))
                        .build())
                .build();
        EMBEDDED_ELASTIC.start();
    }

    @Test
    public void testName() throws Exception
    {
        EMBEDDED_ELASTIC.fetchAllDocuments("cars");
    }

    @AfterClass
    public static void afterAll() throws IOException
    {
        EMBEDDED_ELASTIC.stop();
        cleanUp();
    }

    private static void cleanUp() throws IOException
    {
        FileSystemUtils.deleteSubDirectories(new File("target/elasticsearch").toPath());
    }
}
